// automatically generated by the FlatBuffers compiler, do not modify

package im.redpanda.commands;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBPeer extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FBPeer getRootAsFBPeer(ByteBuffer _bb) { return getRootAsFBPeer(_bb, new FBPeer()); }
  public static FBPeer getRootAsFBPeer(ByteBuffer _bb, FBPeer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FBPeer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte nodeId(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int nodeIdLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector nodeIdVector() { return nodeIdVector(new ByteVector()); }
  public ByteVector nodeIdVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer nodeIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nodeIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String ip() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ipAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer ipInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int port() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFBPeer(FlatBufferBuilder builder,
      int nodeIdOffset,
      int ipOffset,
      int port) {
    builder.startTable(3);
    FBPeer.addPort(builder, port);
    FBPeer.addIp(builder, ipOffset);
    FBPeer.addNodeId(builder, nodeIdOffset);
    return FBPeer.endFBPeer(builder);
  }

  public static void startFBPeer(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addNodeId(FlatBufferBuilder builder, int nodeIdOffset) { builder.addOffset(0, nodeIdOffset, 0); }
  public static int createNodeIdVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createNodeIdVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startNodeIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addIp(FlatBufferBuilder builder, int ipOffset) { builder.addOffset(1, ipOffset, 0); }
  public static void addPort(FlatBufferBuilder builder, int port) { builder.addInt(2, port, 0); }
  public static int endFBPeer(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FBPeer get(int j) { return get(new FBPeer(), j); }
    public FBPeer get(FBPeer obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

