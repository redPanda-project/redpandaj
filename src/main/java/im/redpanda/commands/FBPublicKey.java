// automatically generated by the FlatBuffers compiler, do not modify

package im.redpanda.commands;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBPublicKey extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FBPublicKey getRootAsFBPublicKey(ByteBuffer _bb) { return getRootAsFBPublicKey(_bb, new FBPublicKey()); }
  public static FBPublicKey getRootAsFBPublicKey(ByteBuffer _bb, FBPublicKey obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FBPublicKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte publicKey(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int publicKeyLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector publicKeyVector() { return publicKeyVector(new ByteVector()); }
  public ByteVector publicKeyVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer publicKeyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer publicKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createFBPublicKey(FlatBufferBuilder builder,
      int publicKeyOffset) {
    builder.startTable(1);
    FBPublicKey.addPublicKey(builder, publicKeyOffset);
    return FBPublicKey.endFBPublicKey(builder);
  }

  public static void startFBPublicKey(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addPublicKey(FlatBufferBuilder builder, int publicKeyOffset) { builder.addOffset(0, publicKeyOffset, 0); }
  public static int createPublicKeyVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createPublicKeyVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startPublicKeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endFBPublicKey(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFBPublicKeyBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFBPublicKeyBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FBPublicKey get(int j) { return get(new FBPublicKey(), j); }
    public FBPublicKey get(FBPublicKey obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

